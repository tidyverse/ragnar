% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read-markdown.R
\name{read_as_markdown}
\alias{read_as_markdown}
\title{Convert files to Markdown}
\usage{
read_as_markdown(
  path,
  ...,
  html_extract_selectors = c("main"),
  html_zap_selectors = c("nav")
)
}
\arguments{
\item{path}{[string] A filepath or URL. Accepts a wide variety of file types,
including PDF, PowerPoint, Word, Excel, images (EXIF metadata and OCR),
audio (EXIF metadata and speech transcription), HTML, text-based formats
(CSV, JSON, XML), ZIP files (iterates over contents), YouTube URLs, and
EPUBs.}

\item{...}{Passed on to \code{MarkItDown.convert()}.}

\item{html_extract_selectors}{Character vector of CSS selectors. If a match
for a selector is found in the document, only the matched node's contents
are converted. Unmatched extract selectors have no effect.}

\item{html_zap_selectors}{Character vector of CSS selectors. Elements
matching these selectors will be excluded ("zapped") from the HTML document
before conversion to markdown. This is useful for removing navigation bars,
sidebars, headers, footers, or other unwanted elements. By default,
navigation elements (\code{nav}) are excluded.}
}
\value{
A single string of Markdown.
}
\description{
Convert files to Markdown
}
\examples{
\dontshow{if (reticulate::py_available()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Convert HTML
read_as_markdown("https://r4ds.hadley.nz/base-R.html") |>
  substr(1, 500) |>
  cat()

read_as_markdown("https://r4ds.hadley.nz/base-R.html", canonical = TRUE) |>
  substr(1, 500) |>
  cat()

# When converting HTML, you might want to omit certain elements, like
# sidebars, headers, footers, etc. You can pass CSS selector strings
# to either extract nodes or exclude nodes during conversion.
#
# The easiest way to make selectors is to use SelectorGadget:
# https://rvest.tidyverse.orgarticles/selectorgadget.html
#
# You can also right-click on a page and select "Inspect Element" in a
# browser to better understand an HTML page's structure.
#
# For comprehensive or advanced usage of CSS selectors, consult:
# https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors-through-the-css-property
# https://facelessuser.github.io/soupsieve/selectors/

url <- "https://duckdb.org/code_of_conduct"
# Includes the sidebar and other navigational elements
read_as_markdown(url) |> substr(1, 500) |> writeLines()

# Extract the main content
read_as_markdown(url, html_extract_selectors = "#main_content_wrap")

# Alternative approach: exclude nodes
read_as_markdown(
  url,
  html_zap_selectors = c(
    "header",          # node name
    ".sidenavigation", # node class
    ".searchoverlay",  # node class
    "#sidebar"         # node ID
  )
) |> substr(1, 500) |> writeLines()

# Quarto example
url <- "https://quarto.org/docs/computations/python.html"

# Include sidebar, footer, etc.
read_as_markdown(
  url,
  html_extract_selectors = NULL,
  html_zap_selectors = NULL
) |> substr(1, 500) |> writeLines()

# Exclude content outside <main>
read_as_markdown(url, html_extract_selectors = "main") |>
  substr(1, 500) |> writeLines()

# Exclude specific matching nodes
read_as_markdown(
  url,
  html_extract_selectors = NULL,
  html_zap_selectors = c(
    "#quarto-sidebar",
    "#quarto-margin-sidebar",
    "header",
    "footer",
    "nav"
  )
) |> substr(1, 500) |> writeLines()

# Convert PDF
pdf <- file.path(R.home("doc"), "NEWS.pdf")
read_as_markdown(pdf) |> substr(1, 1000) |> cat()
## Alternative:
# pdftools::pdf_text(pdf) |> substr(1, 2000) |> cat()

# Convert images to markdown descriptions using OpenAI
jpg <- file.path(R.home("doc"), "html", "logo.jpg")
if (Sys.getenv("OPENAI_API_KEY") != "") {
  # if (xfun::is_macos()) system("brew install ffmpeg")
  reticulate::py_require("openai")
  llm_client <- reticulate::import("openai")$OpenAI()
  read_as_markdown(jpg, llm_client = llm_client, llm_model = "gpt-4.1-mini")
  # # Description:
  # The image displays the logo of the R programming language. It features a
  # large, stylized capital letter "R" in blue, positioned prominently in the
  # center. Surrounding the "R" is a gray oval shape that is open on the right
  # side, creating a dynamic and modern appearance. The R logo is commonly
  # associated with statistical computing, data analysis, and graphical
  # representation in various scientific and professional fields.
}

# Alternative approach to image conversion:
if (
  Sys.getenv("OPENAI_API_KEY") != "" &&
    rlang::is_installed("ellmer") &&
    rlang::is_installed("magick")
) {
  chat <- ellmer::chat_openai(echo = TRUE)
  chat$chat("Describe this image", ellmer::content_image_file(jpg))
}
\dontshow{\}) # examplesIf}
}
